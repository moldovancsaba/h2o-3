apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'com.github.hierynomus.license'

description = "H2O Application Assembly"
// Exclude unwanted dependencies
configurations {
    compile.exclude module: 'junit'
    compile.exclude module: 'mockito-all'
    compile.exclude module: 'zookeeper'
    compile.exclude module: "javax.mail.glassfish"
}

// Dependencies
dependencies {
    compile project(":h2o-app")
    compile project(":h2o-web")
    compile project(":h2o-avro-parser")
    compile project(":h2o-persist-s3")
    compile project(":h2o-persist-hdfs")
    if (project.hasProperty("doIncludeOrc") && project.doIncludeOrc == "true") {
        compile project(":h2o-orc-parser")
    }
    compile project(":h2o-parquet-parser")
    compile "org.slf4j:slf4j-log4j12:1.7.5"
}

//
// Bundle optional modules
// The process is defined by convention. There are two flags:
//  - -Pwith${componentName}=true - enables component "componentName" and includes it in assembly
//  - -P${componentName}Version=3.14 - overrides default component version
//
for (comp in optionalComponents) {
    def compName = comp['name']
    def compVersion = comp['version']
    def compEnabled = comp['enabled']
    def compPropName = "with${compName.capitalize()}"
    def compPropVersionName = "${compName}Version"

    if (!project.hasProperty(compPropVersionName)) {
        project.ext.set(compPropVersionName, compVersion)
    }
    if (compEnabled || project.hasProperty(compPropName) && project.property(compPropName)) {
        logger.lifecycle("== ${project.path}: Using optional component: ${compName}, version ${project.findProperty(compPropVersionName)}")
        apply from: "$rootDir/gradle/components/${compName}.gradle"
    }
    
}

shadowJar {
  mergeServiceFiles()
  classifier = ''
  // CDH 5.3.0 provides joda-time v1.6 which is too old, shadow the library instead
  if (!project.hasProperty("jacocoCoverage")) {
    relocate 'org.joda.time', 'ai.h2o.org.joda.time'
  }
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.SF'
  exclude 'synchronize.properties'
  exclude 'uploader.properties'
  exclude 'test.properties'
  exclude 'cockpitlite.properties'
  exclude 'devpay_products.properties'
  manifest {
    attributes 'Main-Class': 'water.H2OApp'
    attributes 'Class-Path': extensionProjects.collect { "h2o-ext/${it.name}.jar" }.join(";")
  }
  transform(com.github.jengelman.gradle.plugins.shadow.transformers.IncludeResourceTransformer.class) {
    file = file("${buildDir}/reports/license/dependency-license.xml")
    resource = "META-INF/license/h2o-depenencies-licenses.xml"
  }
}

artifacts {
  archives shadowJar
}

//
// Support make infrastructure by copying the resulting assembly into parent
// project build directory
//

def assembly = "main.jar"
def allInOne = "h2o.jar"

task copyJar(type: Copy) {
    from ("${project.buildDir}/libs"){
        include assembly
    }
    into "${rootProject.buildDir}"
    rename { it.replace(assembly, allInOne) }
}

task copyExtensionJars(type: Copy) {
    extensionProjects.each { p ->
        from("${p.buildDir}/libs") {
            include "${p.project.name}.jar"
        }
        into "${rootProject.buildDir}/h2o-ext/"
        eachFile { f ->
            logger.info("Copy extension file ${f.relativeSourcePath} to ${f.relativePath}")
        }
    }
}

// Make sure extensions jars are built prior to making the shadow jar
// Include licences
shadowJar.dependsOn extensionProjects.collect { p -> p.getTasksByName("jar", false) } + [project.tasks.getByName('downloadLicenses')]
// Execute always copyJar & copyExtensionJars
shadowJar.finalizedBy copyJar, copyExtensionJars
// Run shadowJar as par of build
jar.finalizedBy shadowJar

